import tkinter as tk
from tkcalendar import DateEntry
import tkinterDnD
import sqlite3

root = tkinterDnD.Tk()
root.title("Game Database Entry Form")
root.geometry("480x910")
root.columnconfigure([0, 1], minsize=200)
root.rowconfigure([0, 25], minsize=60)
root.option_add("*font", "Roboto", 11)

#Game DB Entry Form title
label_title = tk.Label(text="Game DB", height="2", font=("Roboto", 24))
label_title.grid(row=0, column=0, sticky="e")
label_title = tk.Label(text="Entry Form", height="2", font=("Roboto", 24))
label_title.grid(row=0, column=1, sticky="w")

#Lists for OptionMenus
platform_list = ["Arcade", "Atari 2600", "Atari Jaguar", "Book", "Magazine", "Memorabilia", "Microsoft Xbox", "Microsoft Xbox 360", "Microsoft Xbox One", "NEC PC-Engine", "Nintendo 64", "Nintendo DS", "Nintendo Entertainment System", "Nintendo Famicom", "Nintendo Game & Watch", "Nintendo Game Boy", "Nintendo Game Boy Advance", "Nintendo Game Boy Color", "Nintendo Gamecube", "Nintendo Super Famicom", "Nintendo Super NES", "Nintendo Switch", "Nintendo Virtual Boy", "Nintendo Wii", "PC DOS", "PC Windows", "Pinball", "Sega 32X", "Sega Dreamcast", "Sega Game Gear", "Sega Genesis", "Sega Master System", "Sega Saturn", "Sony Playstation 1", "Sony Playstation 2", "Sony Playstation 3", "Sony Playstation 4", "Sony Playstation 5", "Sony Playstation Portable", "Vectrex", "VHS"]
yes_no_list = ["Yes", "No", "N/A"]
region_list = ["USA", "JPN", "EUR", "AUS", "CHN", "BRZ"]
condition_list = ["Poor", "Good", "Fine", "Mint"]
number_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Variables to keep track of stuff entered
ent_name = tk.StringVar(root)
platform_value = tk.StringVar(root)
platform_value.set("Select a Platform")
ent_type = tk.StringVar(root)
ent_developer = tk.StringVar(root)
ent_publisher = tk.StringVar(root)
ent_genre = tk.StringVar(root)
ent_format = tk.StringVar(root)
ent_edition = tk.StringVar(root)
region_value = tk.StringVar(root)
region_value.set("Select a Region")
include_game_value = tk.StringVar(root)
include_game_value.set("Yes or No?")
include_box_value = tk.StringVar(root)
include_box_value.set("Yes or No?")
include_manual_value = tk.StringVar(root)
include_manual_value.set("Yes or No?")
include_extras_value = tk.StringVar(root)
include_extras_value.set("Yes or No?")
condition_value = tk.StringVar(root)
condition_value.set("Select the Condition")
unopened_value = tk.StringVar(root)
unopened_value.set("Is the Item Unopened?")
count_value = tk.IntVar(root)
count_value.set(number_list[0])
rating_value = tk.IntVar(root)
rating_value.set(number_list[0])
#image1
#image2
#image3
#image4
text_box_item_notes = tk.StringVar(root)

#For submitting to the database when the submit button is clicked
def submit_input():
    name = ent_name.get()
    platform = platform_value.get()
    item_type = ent_type.get()
    release_date = cal.get()
    developer = ent_developer.get()
    publisher = ent_publisher.get()
    genre = ent_genre.get()
    item_format = ent_format.get()
    item_edition = ent_edition.get()
    region = region_value.get()
    inc_game  = include_game_value.get()
    inc_box = include_box_value.get()
    inc_manual = include_manual_value.get()
    inc_extras = include_extras_value.get()
    condition = condition_value.get()
    unopened = unopened_value.get()
    count = count_value.get()
    rating = rating_value.get()
    #image1
    #image2
    #image3
    #image4
    notes = text_box_item_notes.get("1.0", 'end-1c')
    #Adds data to sqlite database
    conn = sqlite3.connect('game_database.db')
    data_insert_query = '''INSERT INTO Game_Items ( ITEM_NAME, PLATFORM, TYPE, RELEASE_DATE, DEVELOPER, PUBLISHER, GENRE, FORMAT, EDITION, REGION, INCLUDE_GAME, INCLUDE_BOX, INCLUDE_MANUAL, INCLUDE_EXTRAS, CONDITION, COUNT, RATING, NOTES, UNOPENED) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'''
    data_insert_tuple = (name, platform, item_type, release_date, developer, publisher, genre, item_format, item_edition, region, inc_game, inc_box, inc_manual, inc_extras, condition, count, rating, notes, unopened)
    cursor = conn.cursor()
    cursor.execute(data_insert_query, data_insert_tuple)
    conn.commit()
    conn.close()
    
#Resets form for next entry
def reset_form():
    for widget in root.winfo_children():
        if isinstance(widget, tk.Entry):
            widget.delete(0,'end')
        if isinstance(widget, tk.Text):
            widget.delete('1.0','end')
    ent_name.insert(0,"Item Name")
    platform_value.set("Select a Platform")
    ent_type.insert(0,"Item Type (game, console, etc.)")
    cal.set_date("01/01/1900")
    ent_developer.insert(0,"Developer Name")
    ent_publisher.insert(0,"Publisher Name")
    ent_genre.insert(0,"Genre")
    ent_format.insert(0,"Format (cartridge, optical disc, etc.)")
    ent_edition.insert(0,"Edition")
    region_value.set("Select a Region")
    include_game_value.set("Yes or No?")
    include_box_value.set("Yes or No?")
    include_manual_value.set("Yes or No?")
    include_extras_value.set("Yes or No?")
    condition_value.set("Select the Condition")
    unopened_value.set("Is the Item Unopened?")
    count_value.set("0")
    rating_value.set("0")
    return

#Labels for inputs on left column
label_entries = tk.Label (text="Item Name")
label_entries.grid(row=1, column=0, sticky="e", padx="5")
label_entries = tk.Label (text="Platform")
label_entries.grid(row=2, column=0, sticky="e", padx="5")
label_entries = tk.Label (text="Item Type")
label_entries.grid(row=3, column=0, sticky="e", padx="5")
label_entries = tk.Label (text="Release Date")
label_entries.grid(row=4, column=0, sticky="e", padx="5")
label_entries = tk.Label (text="Developer")
label_entries.grid(row=5, column=0, sticky="e", padx="5")
label_entries = tk.Label (text="Publisher")
label_entries.grid(row=6, column=0, sticky="e", padx="5")
label_entries = tk.Label (text="Genre")
label_entries.grid(row=7, column=0, sticky="e", padx="5")
label_entries = tk.Label (text="Item Format")
label_entries.grid(row=8, column=0, sticky="e", padx="5")
label_entries = tk.Label (text="Edition")
label_entries.grid(row=9, column=0, sticky="e", padx="5")
label_entries = tk.Label (text="Region")
label_entries.grid(row=10, column=0, sticky="e", padx="5")
label_entries = tk.Label (text="Includes Game?")
label_entries.grid(row=11, column=0, sticky="e", padx="5")
label_entries = tk.Label (text="Includes Box?")
label_entries.grid(row=12, column=0, sticky="e", padx="5")
label_entries = tk.Label (text="Includes Manual?")
label_entries.grid(row=13, column=0, sticky="e", padx="5")
label_entries = tk.Label (text="Includes Extras?")
label_entries.grid(row=14, column=0, sticky="e", padx="5")
label_entries = tk.Label (text="Condition")
label_entries.grid(row=15, column=0, sticky="e", padx="5")
label_entries = tk.Label (text="Item Unopened?")
label_entries.grid(row=16, column=0, sticky="e", padx="5")
label_entries = tk.Label (text="Count")
label_entries.grid(row=17, column=0, sticky="e", padx="5")
label_entries = tk.Label (text="Rating")
label_entries.grid(row=18, column=0, sticky="e", padx="5")
label_entries = tk.Label (text="Image 1")
label_entries.grid(row=19, column=0, sticky="e", padx="5")
label_entries = tk.Label (text="Image 2")
label_entries.grid(row=20, column=0, sticky="e", padx="5")
label_entries = tk.Label (text="Image 3")
label_entries.grid(row=21, column=0, sticky="e", padx="5")
label_entries = tk.Label (text="Image 4")
label_entries.grid(row=22, column=0, sticky="e", padx="5")
label_entries = tk.Label (text="Notes")
label_entries.grid(row=23, column=0, sticky="e", padx="5")

#Entries, OptionMenus, and Text boxes in right column
ent_name = tk.Entry(width=28)
ent_name.insert(0, "Item Name")
ent_name.grid(row=1, column=1, sticky="w")
question_menu = tk.OptionMenu(root, platform_value, *platform_list)
question_menu.grid(row=2, column=1, sticky="w")
question_menu.config(takefocus=1)
ent_type = tk.Entry(width=28)
ent_type.insert (0, "Item Type (game, console, etc.)")
ent_type.grid(row=3, column=1, sticky="w")
cal = DateEntry(root, selectmode='day', date_pattern="mm/dd/yyyy")
cal.bind("<<DateEntrySelected>>")
cal.grid(row=4, column=1, sticky="w")
ent_developer = tk.Entry(width=28)
ent_developer.insert (0, "Developer Name")
ent_developer.grid (row=5, column=1, sticky="w")
ent_publisher = tk.Entry(width=28)
ent_publisher.insert (0, "Publisher Name")
ent_publisher.grid (row=6, column=1, sticky="w")
ent_genre = tk.Entry(width=28)
ent_genre.insert (0, "Genre")
ent_genre.grid (row=7, column=1, sticky="w")
ent_format = tk.Entry(width=28)
ent_format.insert (0, "Format (cartridge, optical disc, etc.)")
ent_format.grid (row=8, column=1, sticky="w")
ent_edition = tk.Entry(width=28)
ent_edition.insert (0, "Standard")
ent_edition.grid (row=9, column=1, sticky="w")
question_menu = tk.OptionMenu(root, region_value, *region_list)
question_menu.grid(row=10, column=1, sticky="w")
question_menu.config(takefocus=1)
question_menu = tk.OptionMenu(root, include_game_value, *yes_no_list)
question_menu.grid(row=11, column=1, sticky="w")
question_menu.config(takefocus=1)
question_menu = tk.OptionMenu(root, include_box_value, *yes_no_list)
question_menu.grid(row=12, column=1, sticky="w")
question_menu.config(takefocus=1)
question_menu = tk.OptionMenu(root, include_manual_value, *yes_no_list)
question_menu.grid(row=13, column=1, sticky="w")
question_menu.config(takefocus=1)
question_menu = tk.OptionMenu(root, include_extras_value, *yes_no_list)
question_menu.grid(row=14, column=1, sticky="w")
question_menu.config(takefocus=1)
question_menu = tk.OptionMenu(root, condition_value, *condition_list)
question_menu.grid(row=15, column=1, sticky="w")
question_menu.config(takefocus=1)
question_menu = tk.OptionMenu(root, unopened_value, *yes_no_list)
question_menu.grid(row=16, column=1, sticky="w")
question_menu.config(takefocus=1)
question_menu = tk.OptionMenu(root, count_value, *number_list)
question_menu.grid(row=17, column=1, sticky="w")
question_menu.config(takefocus=1)
question_menu = tk.OptionMenu(root, rating_value, *number_list)
question_menu.grid(row=18, column=1, sticky="w")
question_menu.config(takefocus=1)
ent_image1 = tk.Entry(width=28)
ent_image1.insert (0, "Image 1")
ent_image1.grid (row=19, column=1, sticky="w")
ent_image2 = tk.Entry(width=28)
ent_image2.insert (0, "Image 2")
ent_image2.grid (row=20, column=1, sticky="w")
ent_image3 = tk.Entry(width=28)
ent_image3.insert (0, "Image 3")
ent_image3.grid (row=21, column=1, sticky="w")
ent_image4 = tk.Entry(width=28)
ent_image4.insert (0, "Image 4")
ent_image4.grid (row=22, column=1, sticky="w")
text_box_item_notes = tk.Text(wrap="word", width=28, height=5, pady=5)
text_box_item_notes.grid(row=23, column=1, sticky="w")

#Submission button
btn_submit = tk.Button(root, text="Submit Entry", command=lambda:[submit_input(), reset_form()], width=25, height=2, fg="black", bg="light gray")
btn_submit.grid (row=24, column=1, sticky="w")

root.mainloop()